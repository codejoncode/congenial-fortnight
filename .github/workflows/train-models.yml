name: Daily Model Training & Backtesting

on:
  schedule:
    - cron: '0 20 * * *'  # Run daily at 8 PM UTC (4 PM EDT during DST) - US market close
  workflow_dispatch:     # Manual trigger
  push:
    branches: [ main, enhancements_backend ]
    paths:
      - 'candle_prediction_system.py'
      - 'daily_forex_signal_system.py'

jobs:
  train-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache forex data
      uses: actions/cache@v3
      with:
        path: data/raw
        key: forex-data-${{ github.run_number }}
        restore-keys: |
          forex-data-

    - name: Cache trained models
      uses: actions/cache@v3
      with:
        path: models
        key: models-${{ github.run_number }}
        restore-keys: |
          models-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create necessary directories
      run: |
        mkdir -p models data/raw output

    - name: Update forex data (incremental)
      run: |
        python -c "
        from candle_prediction_system import CandlePredictionSystem
        system = CandlePredictionSystem(['EURUSD', 'XAUUSD'])
        # Only fetch recent data to update existing files
        for pair in ['EURUSD', 'XAUUSD']:
            system.fetch_data(pair, interval='1d', update_existing=True)
            system.fetch_data(pair, interval='4h', update_existing=True)
            system.fetch_data(pair, interval='1wk', update_existing=True)
        print('Data update completed')
        "

    - name: Train models (incremental update)
      run: |
        python -c "
        from candle_prediction_system import CandlePredictionSystem
        system = CandlePredictionSystem(['EURUSD', 'XAUUSD'])
        results = system.run_full_pipeline()
        print('Training completed successfully')
        "

    - name: Run backtests
      run: |
        python -c "
        import os
        import sys
        sys.path.append('.')
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'signals.settings')

        import django
        django.setup()

        from django.core.management import execute_from_command_line
        for pair in ['EURUSD', 'XAUUSD']:
            execute_from_command_line(['manage.py', 'backtest_signals', pair, '--days', '30', '--export-csv'])
        "

    - name: Generate signals for today
      run: |
        python -c "
        import os
        import sys
        sys.path.append('.')
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'signals.settings')

        import django
        django.setup()

        from django.core.management import execute_from_command_line
        execute_from_command_line(['manage.py', 'run_daily_signal'])
        "

    - name: Generate performance report
      run: |
        echo '# Daily Training Report - $(date)' > training_report.md
        echo '' >> training_report.md
        echo '## Training Results' >> training_report.md
        echo '- Models trained successfully' >> training_report.md
        echo '- Backtest completed' >> training_report.md
        echo '- Daily signals generated' >> training_report.md
        echo '' >> training_report.md
        echo '## Files Generated' >> training_report.md
        ls -la models/ | head -10 >> training_report.md
        echo '' >> training_report.md
        ls -la output/ | head -10 >> training_report.md

    - name: Send notifications (signals)
      run: |
        python -c "
        import os
        import sys
        import json
        sys.path.append('.')

        # Import notification system
        from notification_system import NotificationSystem

        # Load signals from today's generation
        signals = []
        try:
            # Try to load signals from Django command output or file
            with open('output/daily_signals.json', 'r') as f:
                signals_data = json.load(f)
                signals = signals_data.get('signals', [])
        except:
            print('No signal file found, checking for recent signals...')

        if signals:
            notifier = NotificationSystem()

            # Get recipients from environment variables
            recipients = []
            email_recipient = os.getenv('NOTIFICATION_EMAIL')
            sms_recipient = os.getenv('NOTIFICATION_SMS')

            if email_recipient:
                recipients.append(email_recipient)
            if sms_recipient:
                recipients.append(sms_recipient)

            if recipients:
                print(f'Sending notifications to {len(recipients)} recipients')
                notifier.send_signal_notification(signals, recipients)
            else:
                print('No notification recipients configured')
        else:
            print('No signals to notify about')
        "
      env:
        EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
        NOTIFICATION_SMS: ${{ secrets.NOTIFICATION_SMS }}

    - name: Upload trained models
      uses: actions/upload-artifact@v3
      with:
        name: eurusd-models-${{ github.run_number }}
        path: models/
        retention-days: 30

    - name: Upload backtest results
      uses: actions/upload-artifact@v3
      with:
        name: backtest-results-${{ github.run_number }}
        path: output/
        retention-days: 30

    - name: Upload training report
      uses: actions/upload-artifact@v3
      with:
        name: training-report-${{ github.run_number }}
        path: training_report.md
        retention-days: 7

    - name: Commit model updates (optional)
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add models/ output/
        git commit -m "Update models and backtest results [automated]" || echo "No changes to commit"
        git push || echo "Push failed - likely due to branch protection"

    - name: Notify on failure
      if: failure()
      run: |
        echo "Training failed - check logs for details"